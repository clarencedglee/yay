{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["urlTag","URLSearchParams","window","location","search","get","App","GlobalStyle","items","tags","slugify","ItemsLoader","children","useState","setItems","useEffect","fetchData","Items","props","desiredTags","sluggedTags","map","hasDesiredTags","itemTag","includes","filter","item","length","filterItemsByTag","Item","key","title","src","img","alt","href","url","venue","Dates","starts","ends","join","tag","replace","handleItems","a","fetch","data","text","yaml","parse","createGlobalStyle","styled","div","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qmBAmBA,IAAMA,EAAS,IAAIC,gBAAgBC,OAAOC,SAASC,QAAQC,IAAI,QAAU,GAiB1DC,EAfO,WACpB,OACE,oCACE,kBAACC,EAAD,MACA,kBAAC,EAAD,MACG,SAACC,GAAD,OACC,oCACE,kBAAC,EAAD,CAAOC,KAAM,CAACC,EAAQV,IAAUQ,MAAOA,UAU7CG,EAAwB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACpBC,qBADoB,mBACvCL,EADuC,KAChCM,EADgC,KAO9C,OAJAC,qBAAU,WACRC,EAAUF,KACT,IAEEN,EAIGI,EAAsBJ,GAHrB,mDAMLS,EAA8B,SAAC,GAA2B,EAAzBL,SAA0B,IAAbM,EAAY,4BACxDV,EAyBR,SACEW,EACAX,GAEA,IAAMY,EAAcD,EAAYE,IAAIX,GAE9BY,EAAiB,SAACC,GAAD,OACrBH,EAAYI,SAASd,EAAQa,KAK/B,OAAOf,EAAMiB,QAHW,SAACC,GAAD,OACtBA,EAAKjB,KAAKgB,OAAOH,GAAgBK,UAnCrBC,CAAiBV,EAAMT,KAAMS,EAAMV,OAAOa,KAAI,SAAAK,GAAI,OAC9D,kBAACG,EAAD,CAAMC,IAAKJ,EAAKK,OACd,yBAAKC,IAAKN,EAAKO,IAAKC,IAAI,KACxB,6BACE,uBAAGC,KAAMT,EAAKU,KACZ,4BAAKV,EAAKK,OACV,6BAAML,EAAKW,QAEb,kBAACC,EAAD,KACE,6BAAMZ,EAAKa,QACX,6BAAMb,EAAKc,YAMnB,OAAqB,IAAjBhC,EAAMmB,OACD,yDAAqBT,EAAMT,KAAKgC,KAAK,OAGvC,oCAAGjC,IAGNE,EAAU,SAACgC,GAAD,OAAiBA,EAAIC,QAAQ,KAAM,MAiBnD,IAAM3B,EAAS,uCAAG,WAAO4B,GAAP,mBAAAC,EAAA,sEACGC,MAAM,aADT,cACVC,EADU,gBAEGA,EAAKC,OAFR,OAEVA,EAFU,OAGVxC,EAAQyC,IAAKC,MAAMF,GACzBJ,EAAYpC,GAJI,2CAAH,sDAOTD,EAAc4C,YAAH,KAMXtB,EAAOuB,IAAOC,IAAV,KAiBJf,EAAQc,IAAOC,IAAV,KC/GSC,QACW,cAA7BpD,OAAOC,SAASoD,UAEe,UAA7BrD,OAAOC,SAASoD,UAEhBrD,OAAOC,SAASoD,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.28a88c68.chunk.js","sourcesContent":["import React, { useState, useEffect, ReactElement } from \"react\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport yaml from \"yaml\";\n\ninterface ItemContent {\n  title: string;\n  url: string;\n  starts: string;\n  ends: string;\n  venue: string;\n  img: string;\n  tags: string[];\n}\n\ninterface ItemsProps {\n  tags: string[];\n  items: ItemContent[];\n}\n\nconst urlTag = new URLSearchParams(window.location.search).get(\"see\") || \"\";\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <GlobalStyle />\n      <ItemsLoader>\n        {(items: ItemContent[]) => (\n          <>\n            <Items tags={[slugify(urlTag)]} items={items} />\n          </>\n        )}\n      </ItemsLoader>\n    </>\n  );\n};\n\nexport default App;\n\nconst ItemsLoader: React.FC = ({ children }) => {\n  const [items, setItems] = useState<ItemContent[]>();\n\n  useEffect(() => {\n    fetchData(setItems);\n  }, []);\n\n  if (!items) {\n    return <>Loading...</>;\n  }\n\n  return (children as Function)(items) as ReactElement;\n};\n\nconst Items: React.FC<ItemsProps> = ({ children, ...props }) => {\n  const items = filterItemsByTag(props.tags, props.items).map(item => (\n    <Item key={item.title}>\n      <img src={item.img} alt=\"\" />\n      <div>\n        <a href={item.url}>\n          <h2>{item.title}</h2>\n          <div>{item.venue}</div>\n        </a>\n        <Dates>\n          <div>{item.starts}</div>\n          <div>{item.ends}</div>\n        </Dates>\n      </div>\n    </Item>\n  ));\n\n  if (items.length === 0) {\n    return <>Nothing found for {props.tags.join(\", \")}</>;\n  }\n\n  return <>{items}</>;\n};\n\nconst slugify = (tag: string) => tag.replace(/ /g, \"-\");\n\nfunction filterItemsByTag(\n  desiredTags: string[],\n  items: ItemContent[]\n): ItemContent[] {\n  const sluggedTags = desiredTags.map(slugify);\n\n  const hasDesiredTags = (itemTag: string) =>\n    sluggedTags.includes(slugify(itemTag));\n\n  const compareItemTags = (item: ItemContent) =>\n    item.tags.filter(hasDesiredTags).length;\n\n  return items.filter(compareItemTags);\n}\n\nconst fetchData = async (handleItems: Function) => {\n  const data = await fetch(\"/data.yml\");\n  const text = await data.text();\n  const items = yaml.parse(text);\n  handleItems(items);\n};\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    font-family: sans-serif;\n  }\n`;\n\nconst Item = styled.div`\n  display: flex;\n\n  img {\n    width: 100px;\n    height: 100px;\n  }\n\n  > div {\n    padding: 10px 14px;\n  }\n\n  h2 {\n    margin: 0;\n  }\n`;\n\nconst Dates = styled.div``;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}